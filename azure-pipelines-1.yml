# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: Maven@3
  inputs:
    mavenPomFile: 'maven-examples/maven-example/pom.xml'
    goals: 'clean deploy'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenOptions: '-Xmx3072m'
    mavenAuthenticateFeed: true
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'echo $JFROG_CLI_BUILD_NUMBER'
    
- task: JFrogMaven@1
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean deploy'
    artifactoryResolverService: 'mk-jfrog-artifactory-hts'
    targetResolveReleaseRepo: 'mk-libs-release'
    targetResolveSnapshotRepo: 'mk-libs-snapshot'
    artifactoryDeployService: 'mk-jfrog-artifactory-hts'
    targetDeployReleaseRepo: 'mk-libs-release'
    targetDeploySnapshotRepo: 'mk-libs-snapshot'
    collectBuildInfo: true
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)'
    includeEnvVars: true
    
- task: JFrogToolsInstaller@1
  inputs:
    artifactoryConnection: 'mk-jfrog-artifactory-hts'
    cliInstallationRepo: 'jf-cli-remote'
    installExtractors: true
    extractorsInstallationRepo: 'jfrog-extractors-remote'